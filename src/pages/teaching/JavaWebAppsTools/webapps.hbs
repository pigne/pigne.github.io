---
title: "Web Apps with Tools"
subsection: "Java Web Apps Tools"
order: 1
description:
- "Java EE Web Apps"
- "Web Archives"
- "Web Apps with Maven"
- "Web Apps with Tomcat"
- "Web Apps with Eclipse"
layout: lecture.hbs
---

<section>
<h2>Web App Classical Patterns</h2>
<p>The <em>Model View Controller</em> is the default and acknowledged design pattern for Web Applications.</p>
	<img src="images/generalMVC.svg" class="maximize-width"  alt="mvc sequence">
</section>

<section>
<h2>MVC pattern</h2>
<p>Sequence Diagram of a request within the MVC pattern.</p>
<p>
	<img src="images/mvc_sequence.png" class="maximize-width" class="noborder" alt="mvc sequence">
</p>
</section>

<section>
	<h2>Java EE (Java Enterprise Edition)</h2>
	<ul>
		<li>A set of specifications for tools that extend the standard Java platform (Java SE).</li>
		<li>Java EE is not a <em>Platform</em>, it is a <em>platform specification</em> : a set of standards like 
		Servlets, JSP, EJB, Java Persistence API, JSON Processing, Web Socket API, ... </li>
		<li>
		Many compatible implementations of the standard: 
			<ul>
				<li>Oracle GlassFish</li>
				<li>IBM WebSphere</li>
				<li>Apache TomEE</li>
				<li>Hitachi uCosminexus</li>
				<li>Red Hat WildFly (Formally JBoss)</li>
			</ul>
		</li>
		<li>2 main features : 
			<ul>
				<li>A web server : serves low-level connexions, requests, cookies, security, ...</li>
				<li>An Application Server : serves high-level interaction between users and applications.</li>
			</ul>
		</li>
	</ul>
</section>


<section>
<h2>Java EE Web App MVC Pattern</h2>
<p>Java EE entities in a typical Web App (client/server) request.</p>
	<img src="images/javaWebAppMVC.svg" class="maximize-width"  alt="mvc sequence">
</section>




<section>
{{#markdown}}
##Java EE Servlets

- Java classes meant to extend the capabilities of an *application server*. 
- Could actually serve any king of network connection.
- Mostly used with HTTP.
- All HTTP Servlets extend the ```javax.servlet.http.HttpServlet``` abstract class.
- Main role:
  - Manage requests and response objects (```HttpServletRequest``` and ```HttpServletResponse```)
  - Serve HTTP verbs (```GET, POST, PUT, DELETE, ... ```)
  - Dispatch requests and call appropriate actions (dealing with Views and Models)
 
 {{/markdown}}
</section>


<section>
{{#markdown}}
##Java EE Servlets Methods
	
- ```doGet```, if the servlet supports HTTP GET requests
- ```doPost```, for HTTP POST requests
- ```doPut```, for HTTP PUT requests
- ```doDelete```, for HTTP DELETE requests
- ```init``` and ```destroy```, to manage resources that are held for the life of the servlet
- ```getServletInfo```, which the servlet uses to provide information about itself
- ```service``` : receives HTTP requests and dispatches them to the ```doXXX``` methods. Should not be overridden. 
{{/markdown}}
</section>


<section>
{{#markdown}}
##Exemple Servlet
```	
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class TestServlet extends HttpServlet {

	@Override
	public void doGet( HttpServletRequest request, HttpServletResponse response )   
		throws ServletException, IOException {
		// Do something with 'request' and 'response'
	}
}
```
{{/markdown}}

</section>




<section>
{{#markdown}}

##JavaServer Pages (JSP)

- Fast creation of dynamic web pages
- It's a templating language based on block/tags that can create any output language (HTML, CSS, JS,...)
- Main characteristic : new tags with new functionality  can be defined with ```JavaServer Pages Standard Tag   Library (JSTL)```
- From a JSP a Java Servlet is dynamically created. Then the Servlet is executed to produce the output file. 

```html
<%@ page pageEncoding="UTF-8" %>
<!DOCTYPE html>
<html>
  <head>
  <meta charset="utf-8" />
  <title>Test</title>
  </head>

  <body>
      <p>Je suis une page générée dynamiquement avec JSP, et je sais compter jusqu'à <%=2+3%> !</p>
  </body>
</html>
```
{{/markdown}}
</section>

<section>
{{#markdown}}
## Generated Servlet Class from the JSP

```java
/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2013-12-09 21:02:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
            null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("  <head>\n");
      out.write("  <meta charset=\"utf-8\" />\n");
      out.write("  <title>Test</title>\n");
      out.write("  </head>\n");
      out.write("\n");
      out.write("  <body>\n");
      out.write("      <p>Je suis une page générée dynamiquement avec JSP, et je sais compter jusqu'à ");
      out.print(2+3);
      out.write(" !</p>\n");
      out.write("  </body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
```

{{/markdown}}
</section>


<section>
{{#markdown}}
##Generated HTML Page from the Servlet
```
<!DOCTYPE html>
<html>
  <head>
  <meta charset="utf-8" />
  <title>Test</title>
  </head>

  <body>
      <p>Je suis une page générée dynamiquement avec JSP, et je sais compter jusqu'à 5 !</p>
  </body>
</html>
```

{{/markdown}}
</section>



<section>
{{#markdown}}
##Web Archives (WAR files)

Standard format for deploying an application to an application server. 

```
MyApp/
├── WEB-INF/
│   ├── *.jsp
│   ├── classes/
│   │   └── *.class
│   ├── lib/
│   │   └── *.jar
│   └── web.xml
├── *.html
├── *.css
├── *.png
└── *.js

```
- Resources outside The ```WEB-INF/``` folder are public resources (html, css, js). Inside  ```WEB-INF```, files are not publicly accessible
- ```web.xml``` is the entry point of the application. Contains routing information.
- The ```classes/``` folder contains compiled Java objects of the application
- The ```lib/``` folder contains external libraries needed by the application.

{{/markdown}}
</section>



<section>
	<h1>Web  Applications With Maven </h1>
</section>

<section>
<h2>Install Maven and bootstrap a project</h2>
<p>Install on Ubuntu.</p>
<pre><code class="bash">sudo apt-get install maven
</code></pre>
<p>Create a Web App with the <code>webapp</code> artifact.</p>
<pre><code class="bash">mvn archetype:generate  -DarchetypeArtifactId=maven-archetype-webapp
</code></pre>
<p>3 parameters are asked : </p>
<pre><code class="xml">&lt;groupId&gt;org.pigne&lt;/groupId&gt;
&lt;artifactId&gt;CountDownWebApp&lt;/artifactId&gt;
&lt;version&gt;0.0.1&lt;/version&gt;
</code></pre>    
{{!-- </section>
<section> --}}
<p>Add a missing folder (for proper use with Eclipse later on)</p>
<pre><code class="bash">mkdir CountDownWebApp/src/main/java
cd CountDownWebApp</code></pre>
<p>We get a different structure that a normal WAR. </p>
<pre><code class="bash">CountDownWebApp
├── pom.xml
└── src
    └── main
        ├── resources
        └── webapp
            ├── WEB-INF
            │   └── web.xml
            └── index.jsp
</code></pre>
</section>


<section>
<h2>Generated <code>pom.xml</code> file</h2>
<pre><code class="xml">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.pigne&lt;/groupId&gt;
  &lt;artifactId&gt;CountDownWebApp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;version&gt;0.0.1&lt;/version&gt;
  &lt;name&gt;CountDownWebApp Maven Webapp&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;CountDownWebApp&lt;/finalName&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>
</section>

<section>
<h2>Specify the Java version we want to compile the project</h2>
<p>
We add a the this <code>compiler</code> to the list of plugins, in the <code>build</code> section of the <code>pom.xml</code> file.
</p>
<pre><code class="xml">&lt;build&gt;
  &lt;finalName&gt;CountDownWebApp&lt;/finalName&gt;
  &lt;plugins&gt;
      &lt;plugin&gt;
          &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
          &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;
          &lt;version&gt;3.0&lt;/version&gt;
          &lt;configuration&gt;
              &lt;source&gt;${jdk.version}&lt;/source&gt;
              &lt;target&gt;${jdk.version}&lt;/target&gt;
          &lt;/configuration&gt;
      &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>

</section>

<section>
<h2>Add some dependencies to be able to use Java EE libs</h2>

<ul>
	<li>Dependency for Servlets
	<pre><code class="xml">&lt;dependency&gt;
	&lt;groupId&gt;javax.servlet&lt;/groupId&gt;
	&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
	&lt;version&gt;2.5&lt;/version&gt;
	&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</code></pre></li>
    <li>Dependency for JSP
    <pre><code class="xml">&lt;dependency&gt;
	&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;
	&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
	&lt;version&gt;2.1&lt;/version&gt;
	&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</code></pre>
    </li>
</ul>
<p>
Note the <code>&lt;scope&gt;provided&lt;/scope&gt;</code> property the tells maven <b>not</b> to package those dependencies with the WAR file. Servlets and JSP are already part of the destination Application Server.  
</p>
</section>

<section>
	<h1>Tomcat</h1>
	<p>An Lightweight Application Server and Web Server.</p>
	<p>Not a complete Java EE platform.</p>
</section>


<section>
<h2>Install and configure Tomcat </h2>
<p>Installation for Ubuntu</p>
<pre><code class="bash">sudo apt-get install tomcat7 tomcat-admin</code></pre>
<p>Configure authorizations. In file <code>/somewhere/on/the/machine/tomcat-users.xml</code>: 	</p>
<pre><code class="xml">&lt;tomcat-users&gt;
  &lt;role rolename=&quot;manager-gui&quot;/&gt;
  &lt;role rolename=&quot;manager-script&quot;/&gt;
  &lt;user password=&quot;123soleil&quot; roles=&quot;manager-gui,manager-script&quot; username=&quot;tomcat&quot;/&gt;
&lt;/tomcat-users&gt;</code></pre>
<p>Restart the server (Ubuntu)</p>
<pre><code class="bash">sudo /etc/init.d/tomcat7 restart</code></pre>

</section>


<section>
	<h2>Maven and Tomcat</h2>
	<p>Add and configure a <code>plugin</code> to the <code>build</code> configuration of the project in the <code>pom.xml</code> file.</p>
<pre><code class="xml">&lt;build&gt;
&lt;finalName&gt;CountDownWebApp&lt;/finalName&gt;
&lt;pluginManagement&gt;
  &lt;plugins&gt;
    &lt;plugin&gt;
      &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;
      &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;
      &lt;configuration&gt;
        &lt;path&gt;/${project.build.finalName}&lt;/path&gt;
        &lt;update&gt;true&lt;/update&gt;
        &lt;url&gt;http://localhost:8080/manager/text&lt;/url&gt;
        &lt;username&gt;tomcat&lt;/username&gt;
        &lt;password&gt;123soleil&lt;/password&gt;
      &lt;/configuration&gt;
    &lt;/plugin&gt;
  &lt;/plugins&gt;
&lt;/pluginManagement&gt;
&lt;/build&gt;</code></pre>
Note that the login and  password must reflect the ones int the Tomcat configuration.
</section>

<section>
	<h2>Compile and deploy to Tomcat with Maven</h2>
	<pre><code class="bash">mvn tomcat7:redeploy</code></pre>

<pre><code class="bash">[INFO] tomcatManager status code:200, ReasonPhrase:OK
[INFO] OK - Undeployed application at context path /CountDownWebApp
[INFO] OK - Deployed application at context path /CountDownWebApp
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 4.884s
[INFO] Finished at: Mon Dec 09 23:59:11 CET 2013
[INFO] Final Memory: 13M/33M
[INFO] ------------------------------------------------------------------------
</code></pre>

<p>Let's enjoy our first Web App : <a href="http://localhost:8080/CountDownWebApp/">http://localhost:8080/CountDownWebApp/</a></p>
</section>


<section>
	<h2>Create a Servlet</h2>
	<p> In the <code>src/main/java/</code> folder, under the package names  you  have : <code>src/main/java/org/pigne/CountDown.java</code></p>
<pre><code class="java">package org.pigne;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class CountDown extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		resp.setContentType(&quot;text/html&quot;);
		resp.setCharacterEncoding(&quot;UTF-8&quot;);
		PrintWriter out = resp.getWriter();
		out.println(&quot;&lt;!DOCTYPE html&gt;&quot;);
		out.println(&quot;&lt;html&gt;&quot;);
		out.println(&quot;&lt;head&gt;&quot;);
		out.println(&quot;&lt;meta charset=\&quot;utf-8\&quot; /&gt;&quot;);
		out.println(&quot;&lt;title&gt;CountDown&lt;/title&gt;&quot;);
		out.println(&quot;&lt;/head&gt;&quot;);
		out.println(&quot;&lt;body&gt;&quot;);
		out.println(&quot;&lt;p&gt;&quot;+diff()+&quot;&lt;/p&gt;&quot;);
		out.println(&quot;&lt;/body&gt;&quot;);
		out.println(&quot;&lt;/html&gt;&quot;);

	}
	private String diff(){
		String theDate = &quot;10/12/2013 12:30:00&quot;;
		String pattern = &quot;dd/MM/yyyy HH:mm:ss&quot;;
		Date d2 = null;
		try {
			d2 = new SimpleDateFormat(pattern).parse(theDate);
		} catch (ParseException e) {
			return &quot;server error...&quot;;
		}
		Date d1 = new Date();
		
		long diff = d2.getTime() - d1.getTime();
		 
		long diffSeconds = diff / 1000 % 60;
		long diffMinutes = diff / (60 * 1000) % 60;
		long diffHours = diff / (60 * 60 * 1000) % 24;
		long diffDays = diff / (24 * 60 * 60 * 1000);
		return diffDays+&quot; jour(s) &quot;+diffHours+&quot; heure(s) &quot;+diffMinutes+&quot; minute(s) &quot;+diffSeconds+&quot; seconde(s)&quot;;
		
	}
}</code></pre>

</section>

<section>
	<h2>Declare the Servlate and associate a route to it </h2>
	<p>The main file in the project is <code>web.xml</code> in <code>src/main/webapp/WEB-INF/</code>:</p>
	<pre><code class="xml">&lt;web-app&gt;
	&lt;servlet&gt;
		&lt;servlet-name&gt;CountDown&lt;/servlet-name&gt;
		&lt;servlet-class&gt;org.pigne.CountDown&lt;/servlet-class&gt;
	&lt;/servlet&gt;
	&lt;servlet-mapping&gt;
		&lt;servlet-name&gt;CountDown&lt;/servlet-name&gt;
		&lt;url-pattern&gt;/countdown&lt;/url-pattern&gt;
	&lt;/servlet-mapping&gt;
&lt;/web-app&gt;</code></pre>
<p>Compile / Deploy / Test : <a href="http://localhost:8080/CountDownWebApp/countdown">http://localhost:8080/CountDownWebApp/countdown</a></p>
</section>



<section>
<h2>Create A JSP</h2>
<p>We don't want to write HTML code in the java Servlet to code : separation of concerns</p>
<p>First we create a simple JSP in the public folder : <code>src/main/webapp/CountDownView.jsp</code></p>

<pre><code class="html">&lt;%@ page pageEncoding=&quot;UTF-8&quot; %&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
	&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;title&gt;CountDown&lt;/title&gt;
	&lt;/head&gt;
	
	&lt;body&gt;
		&lt;p&gt;Je suis une page g&eacute;n&eacute;r&eacute;e dynamiquement avec JSP, mais je ne peux pas vous donner l&#039;heure...&lt;/p&gt;
	&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>Test this JSP's automaticaly generated Servlet : <a href="http://localhost:8080/CountDownWebApp/CountDownView.jsp">http://localhost:8080/CountDownWebApp/CountDownView.jsp</a></p>
<p>Check the Generated java code in the <code>work</code> folder of the  Tomcat App server.</p>
</section>


<section>
<h2>Have the Servlet manage the JSP</h2>

<p>Hide the JSP behind the <code>WEB-INF</code> folder.</p>
<pre><code class="bash">mv src/main/webapp/CountDownView.jsp src/main/webapp/WEB-INF</code></pre>

<p>Modify the servlet</p>
<pre><code class="java">@Override
public void doGet( HttpServletRequest request, HttpServletResponse response )   
	throws ServletException, IOException {
	this.getServletContext().getRequestDispatcher( "/WEB-INF/CountDownView.jsp" ).forward( request, response );
}</code></pre>

<p>Compile / Deploy / Test : <a href="http://localhost:8080/CountDownWebApp/countdown">http://localhost:8080/CountDownWebApp/countdown</a></p>
</section>



<section>
	<h2>Transfer data to the JSP</h2>
	<p>Modify the Servlet</p>

<pre><code class="java">@Override
public void doGet( HttpServletRequest request, HttpServletResponse response )   
	throws ServletException, IOException {
	String diff = diff();
	request.setAttribute( "diff", diff );
	this.getServletContext().getRequestDispatcher( "/WEB-INF/CountDownView.jsp" ).forward( request, response );
}</code></pre>
</section>
<section>
	<h2>Transfer data to the JSP</h2>

<p>Modify the JSP</p>

<pre><code class="html">&lt;%@ page pageEncoding=&quot;UTF-8&quot; %&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;title&gt;CountDown&lt;/title&gt;
	&lt;style&gt;
	blockquote {
		font-style: italic;
		padding: 20px;
	}

	blockquote footer{
		color:#555;
		font-weight: bold
	}
	&lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
	&lt;blockquote&gt;
	&amp;laquo; Il reste 
	&lt;% 
            String diff = (String) request.getAttribute(&quot;diff&quot;);
            out.println( diff );
	%&gt;
	avant la fin de ce cours ! &amp;raquo;
	&lt;footer&gt;
	&lt;% 
            String parametre = request.getParameter( &quot;author&quot; );
            out.println( parametre );
	%&gt;
	&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>Compile / Deploy / Test : <a href="http://localhost:8080/CountDownWebApp/countdown">http://localhost:8080/CountDownWebApp/countdown</a></p>
</section>

<section>
{{#markdown}}
# WebApps with Eclipse

A dedicated version of Eclipse for Java EE.

Integration of Maven and Application Servers (e.g. Tomcat).

{{/markdown}}
</section>


<section>
{{#markdown}}
## Install Eclipse for Java EE

- Download **Eclipse IDE for Java EE Developers** from the Eclipse download site : http://www.eclipse.org/downloads/.
- Eclipse is self-contained in the downloaded archive.

{{/markdown}}
</section>

<section>
{{#markdown}}
## Maven & Eclipse
  
- Create an eclipse project from the Maven configuration:
  ```bash
  mvn eclipse:eclipse -Dwtpversion=2.0
  ```
- Import the project in Eclipse as an *existing project* : 
  `File > Import > Existing Projects into Workspace`

<p class='text_center'>
![Import Eclipse Project](images/importEclipse.png)
</p>

{{/markdown}}
</section>

<section>
{{#markdown}}
## Run the project in Eclipse

We create a *run configuration* to execute the maven target: `Run > Run configurations`

<p class='text_center'>
![Import Eclipse Project](images/mavenConfiguration.png)
</p>

{{/markdown}}
</section>




<section>
{{#markdown}}
## An application server in Eclipse

- First, switch off our Tomcat server:
  ```bash
  sudo catalina stop
  # or
  sudo service tomcat stop
  ```
- Then, configure a Tomcat server in Eclipse:
  `Window > Show View > Servers`

<p class='text_center'>
![Import Eclipse Project](images/newServer.png)
</p>
  

{{/markdown}}
</section>


<section>
{{#markdown}}
## Configure Tomcat 
Give the `libexec` folder name of your Tomcat's install directory. Probably `/var/lib/tomcat7/`.


<p class='text_center'>
![Import Eclipse Project](images/configureTomcat.png)
</p>
{{/markdown}}
</section>

<section>
{{#markdown}}
## Run your project

Now you can run you project. Any modification to the code (upon saving the file) will be compiled and published to Tomcat!

<p class='text_center'>
![Import Eclipse Project](images/runOnServer.png)
</p>


{{/markdown}}
</section>



