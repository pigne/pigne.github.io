---
title: "Web Apps Management"
subsection: "Java Web Apps Tools"
order: 2
description:
- "Web Apps with Maven"
- "Web Apps with Tomcat"
- "Web Apps with Eclipse"
layout: lecture.hbs
---


<section>
	<h1>Web  Applications With Maven </h1>
</section>

<section>
<h2>Install Maven and bootstrap a project</h2>
<p>Install on Ubuntu.</p>
<pre><code class="bash">sudo apt-get install maven
</code></pre>
<p>Create a Web App with the <code>webapp</code> artifact.</p>
<pre><code class="bash">mvn archetype:generate  -DarchetypeArtifactId=maven-archetype-webapp
</code></pre>
<p>3 parameters are asked : </p>
<pre><code class="xml">&lt;groupId&gt;org.pigne&lt;/groupId&gt;
&lt;artifactId&gt;CountDownWebApp&lt;/artifactId&gt;
&lt;version&gt;0.0.1&lt;/version&gt;
</code></pre>    
{{!-- </section>
<section> --}}
<p>Add a missing folder (for proper use with Eclipse later on)</p>
<pre><code class="bash">mkdir CountDownWebApp/src/main/java
cd CountDownWebApp</code></pre>
<p>We get development structure, different from a classical WAR file structure. </p>
<pre><code class="bash">CountDownWebApp
├── pom.xml
└── src
    └── main
        ├── resources
        └── webapp
            ├── WEB-INF
            │   └── web.xml
            └── index.jsp
</code></pre>
</section>


<section>
<h2>Generated <code>pom.xml</code> file</h2>
<pre><code class="xml">&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
  xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;&gt;
  &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
  &lt;groupId&gt;org.pigne&lt;/groupId&gt;
  &lt;artifactId&gt;CountDownWebApp&lt;/artifactId&gt;
  &lt;packaging&gt;war&lt;/packaging&gt;
  &lt;version&gt;0.0.1&lt;/version&gt;
  &lt;name&gt;CountDownWebApp Maven Webapp&lt;/name&gt;
  &lt;url&gt;http://maven.apache.org&lt;/url&gt;
  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;3.8.1&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
  &lt;/dependencies&gt;
  &lt;build&gt;
    &lt;finalName&gt;CountDownWebApp&lt;/finalName&gt;
  &lt;/build&gt;
&lt;/project&gt;
</code></pre>
</section>

<section>
{{#markdown}}
##Specify the Java version we want to compile the project

We add the <code>compiler</code> plugin to the list of plugins, in the <code>build</code> section of the <code>pom.xml</code> file.


```xml
<!-- ... -->
<build>
  <finalName>CountDownWebApp</finalName>
  <plugins>
      <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.0</version>
          <configuration>
              <source>1.7</source>
              <target>1.7</target>
          </configuration>
      </plugin>
    </plugins>
</build>
<!-- ... -->
```
{{/markdown}}
</section>

<section>
<h2>Add some dependencies to be able to use Java EE libs</h2>

<ul>
	<li>Dependency for Servlets
	<pre><code class="xml">&lt;dependency&gt;
	&lt;groupId&gt;javax.servlet&lt;/groupId&gt;
	&lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
	&lt;version&gt;2.5&lt;/version&gt;
	&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</code></pre></li>
    <li>Dependency for JSP
    <pre><code class="xml">&lt;dependency&gt;
	&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;
	&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;
	&lt;version&gt;2.1&lt;/version&gt;
	&lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;</code></pre>
    </li>
</ul>
<p>
Note the <code>&lt;scope&gt;provided&lt;/scope&gt;</code> property the tells maven <b>not</b> to package those dependencies with the WAR file. Servlets and JSP are already part of the destination Application Server.  
</p>
</section>

<section>
	<h1>Tomcat</h1>
	<p>An Lightweight Application Server and Web Server.</p>
	<p>Not a complete Java EE platform.</p>
</section>


<section>
{{#markdown}}
##Install and configure Tomcat

Installation for Ubuntu

```bash
sudo apt-get install tomcat7 tomcat7-admin
```

Configure authorizations. In file `/etc/tomcat7/tomcat-users.xml`:

```xml
<tomcat-users>
  <role rolename="manager-gui"/>
  <role rolename="manager-script"/>
  <user username="tomcat" password="123soleil" roles="manager-gui,manager-script" />
</tomcat-users>
```

Restart the server (Ubuntu)

```bash
sudo /etc/init.d/tomcat7 restart
```

{{/markdown}}
</section>


<section>
{{#markdown}}
##Maven and Tomcat

Add and configure a <code>plugin</code> to the <code>build</code> configuration of the project in the <code>pom.xml</code> file.

```xml
<build>
<finalName>CountDownWebApp</finalName>
<pluginManagement>
  <plugins>
    <plugin>
      <groupId>org.apache.tomcat.maven</groupId>
      <artifactId>tomcat7-maven-plugin</artifactId>
      <configuration>
        <path>/${project.build.finalName}</path>
        <update>true</update>
        <url>http://localhost:8080/manager/text</url>
        <username>tomcat</username>
        <password>123soleil</password>
      </configuration>
    </plugin>
  </plugins>
</pluginManagement>
</build>
```

Note that the login and  password must reflect the ones int the Tomcat configuration.

{{/markdown}}
</section>

<section>
{{#markdown}}
##Compile and deploy to Tomcat with Maven


```bash
mvn tomcat7:redeploy
```



```bash
	[INFO] tomcatManager status code:200, ReasonPhrase:OK
	[INFO] OK - Undeployed application at context path /CountDownWebApp
	[INFO] OK - Deployed application at context path /CountDownWebApp
	...
	[INFO] BUILD SUCCESS
	[INFO] Total time: 4.884s
	[INFO] Finished at: Mon Dec 09 23:59:11 CET 2013
	[INFO] Final Memory: 13M/33M	
```


Let's enjoy our first Web App : <a href="http://localhost:8080/CountDownWebApp/">http://localhost:8080/CountDownWebApp/</a></p>

{{/markdown}}
</section>


<section>
{{#markdown}}

##Create a Servlet
	
In the <code>src/main/java/</code> folder, under the package names  you  have : `src/main/java/org/pigne/CountDown.java`

```java
package org.pigne;

import java.io.IOException;
import java.io.PrintWriter;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class CountDown extends HttpServlet {

	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp)
			throws ServletException, IOException {
		resp.setContentType("text/html");
		resp.setCharacterEncoding("UTF-8");
		PrintWriter out = resp.getWriter();
		out.println("<!DOCTYPE html>");
		out.println("<html>");
		out.println("<head>");
		out.println("<meta charset=\"utf-8\" />");
		out.println("<title>CountDown</title>");
		out.println("</head>");
		out.println("<body>");
		out.println("<p>"+diff()+"</p>");
		out.println("</body>");
		out.println("</html>");

	}
	private String diff(){
		String theDate = "17/11/2014 12:30:00";
		String pattern = "dd/MM/yyyy HH:mm:ss";
		Date d2 = null;
		try {
			d2 = new SimpleDateFormat(pattern).parse(theDate);
		} catch (ParseException e) {
			return "server error...";
		}
		Date d1 = new Date();
		
		long diff = d2.getTime() - d1.getTime();
		 
		long diffSeconds = diff / 1000 % 60;
		long diffMinutes = diff / (60 * 1000) % 60;
		long diffHours = diff / (60 * 60 * 1000) % 24;
		long diffDays = diff / (24 * 60 * 60 * 1000);
		return diffDays+" jour(s) "+diffHours+" heure(s) "+diffMinutes+" minute(s) "+diffSeconds+" seconde(s)";
		
	}
}```

{{/markdown}}
</section>

<section>
{{#markdown}}
Declare the Servlate and associate a route to it

The main file in the project is <code>web.xml</code> in <code>src/main/webapp/WEB-INF/</code>:
```xml
<web-app>
	<servlet>
		<servlet-name>CountDown</servlet-name>
		<servlet-class>org.pigne.CountDown</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>CountDown</servlet-name>
		<url-pattern>/countdown</url-pattern>
	</servlet-mapping>
</web-app>
```

- Compile : `mvn compile`
- Deploy : `mvn tomcat7:redeploy`
- Test : <a href="http://localhost:8080/CountDownWebApp/countdown">http://localhost:8080/CountDownWebApp/countdown</a>
{{/markdown}}
</section>



<section>
{{#markdown}}
##Create A JSP

- We don't want to write HTML code in the java Servlet code : separation of concerns
- First we create a simple JSP in the public folder : <code>src/main/webapp/CountDownView.jsp</code>

```html
<%@ page pageEncoding="UTF-8" %>
<!DOCTYPE html>
<html>
	<head>
	<meta charset="utf-8" />
	<title>CountDown</title>
	</head>
	
	<body>
		<p>Je suis une page générée dynamiquement avec JSP, mais je ne peux pas vous donner l'heure...</p>
	</body>
</html>
```


<p>Test this JSP's automaticaly generated Servlet : <a href="http://localhost:8080/CountDownWebApp/CountDownView.jsp">http://localhost:8080/CountDownWebApp/CountDownView.jsp</a></p>
<p>Check the Generated java code in the <code>work</code> folder of the  Tomcat App server (`/var/lib/tomcat7/work/**/CountDownWebApp/**/CountDownView_jsp.java`).</p>
{{/markdown}}
</section>


<section>
<h2>Have the Servlet manage the JSP</h2>

<p>Hide the JSP behind the <code>WEB-INF</code> folder.</p>
<pre><code class="bash">mv src/main/webapp/CountDownView.jsp src/main/webapp/WEB-INF</code></pre>

<p>Modify the servlet</p>
<pre><code class="java">@Override
public void doGet( HttpServletRequest request, HttpServletResponse response )   
	throws ServletException, IOException {
	this.getServletContext().getRequestDispatcher( "/WEB-INF/CountDownView.jsp" ).forward( request, response );
}</code></pre>

<p>Compile / Deploy / Test : <a href="http://localhost:8080/CountDownWebApp/countdown">http://localhost:8080/CountDownWebApp/countdown</a></p>
</section>



<section>
	<h2>Transfer data to the JSP</h2>
	<p>Modify the Servlet</p>

<pre><code class="java">@Override
public void doGet( HttpServletRequest request, HttpServletResponse response )   
	throws ServletException, IOException {
	String diff = diff();
	request.setAttribute( "diff", diff );
	this.getServletContext().getRequestDispatcher( "/WEB-INF/CountDownView.jsp" ).forward( request, response );
}</code></pre>
</section>
<section>
	<h2>Transfer data to the JSP</h2>

<p>Modify the JSP</p>

<pre><code class="html">&lt;%@ page pageEncoding=&quot;UTF-8&quot; %&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
	&lt;meta charset=&quot;utf-8&quot; /&gt;
	&lt;title&gt;CountDown&lt;/title&gt;
	&lt;style&gt;
	blockquote {
		font-style: italic;
		padding: 20px;
	}

	blockquote footer{
		color:#555;
		font-weight: bold
	}
	&lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
	&lt;blockquote&gt;
	&amp;laquo; Il reste 
	&lt;% 
            String diff = (String) request.getAttribute(&quot;diff&quot;);
            out.println( diff );
	%&gt;
	avant la fin de ce cours ! &amp;raquo;
	&lt;footer&gt;
	&lt;% 
            String parametre = request.getParameter( &quot;author&quot; );
            out.println( parametre );
	%&gt;
	&lt;/footer&gt;
	&lt;/blockquote&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>

<p>Compile / Deploy / Test : <a href="http://localhost:8080/CountDownWebApp/countdown">http://localhost:8080/CountDownWebApp/countdown</a></p>
</section>

<section>
{{#markdown}}
# WebApps with Eclipse

A dedicated version of Eclipse for Java EE.

Integration of Maven and Application Servers (e.g. Tomcat).

{{/markdown}}
</section>


<section>
{{#markdown}}
## Install Eclipse for Java EE

- Download **Eclipse IDE for Java EE Developers** from the Eclipse download site : http://www.eclipse.org/downloads/.
- Eclipse is self-contained in the downloaded archive.

{{/markdown}}
</section>

<section>
{{#markdown}}
## Maven & Eclipse
  
- Create an eclipse project from the Maven configuration:
  ```bash
  mvn eclipse:eclipse -Dwtpversion=2.0
  ```
- Import the project in Eclipse as an *existing project* : 
  `File > Import > Existing Projects into Workspace`

<p class='text_center'>
![Import Eclipse Project](images/importEclipse.png)
</p>

{{/markdown}}
</section>

<section>
{{#markdown}}
## Run the project in Eclipse

We create a *run configuration* to execute the maven target: `Run > Run configurations`

<p class='text_center'>
![Import Eclipse Project](images/mavenConfiguration.png)
</p>

{{/markdown}}
</section>




<section>
{{#markdown}}
## An application server in Eclipse

- First, switch off our Tomcat server:
  ```bash
  sudo catalina stop
  # or
  sudo service tomcat stop
  ```
- Then, configure a Tomcat server in Eclipse:
  `Window > Show View > Servers`

<p class='text_center'>
![Import Eclipse Project](images/newServer.png)
</p>
  

{{/markdown}}
</section>


<section>
{{#markdown}}
## Configure Tomcat 
Give the `libexec` folder name of your Tomcat's install directory. Probably `/var/lib/tomcat7/`.


<p class='text_center'>
![Import Eclipse Project](images/configureTomcat.png)
</p>
{{/markdown}}
</section>

<section>
{{#markdown}}
## Run your project

Now you can run you project. Any modification to the code (upon saving the file) will be compiled and published to Tomcat!

<p class='text_center'>
![Import Eclipse Project](images/runOnServer.png)
</p>


{{/markdown}}
</section>



