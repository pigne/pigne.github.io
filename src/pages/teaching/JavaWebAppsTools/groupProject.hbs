---
title: "Projet de Groupe"
subsection: "Java Web Apps Tools..."
order: 5
layout: default.hbs
description:
- "Sujet du Projet de Groupe"
- "Master 2 Matis, option CAW"
- "Le Havre 2014"
---



##Travail demandé

On désire réaliser une application qui permet à un utilisateur, sans qu'il se connecte, de gérer différents compteurs de temps. Il doit pouvoir ajouter, modifier ou supprimer des compteurs.

Pour chaque compteur il doit pouvoir :
- définir un titre pour ce compteur
- définir la langue à partir d'une liste proposée, qui permet de définir une locale
- définir une échéance dans le temps pour ce compteur (date et heure, dans la locale définie par la langue)

Un compteur, une fois défini avec sa langue et son échéance,  s'affiche sur la page et se met à jour, chaque seconde. La mise à jour du compteur est effectuée sur le serveur, seuls la nouvelle valeur est envoyée en JSON. Pour éviter que le client ne fasse trop de requêtes de mise à jours sur le serveur, on a recours à un nouveau mode de communication : les **WebSockets** qui permettent au serveur d'envoyer régulièrement des informations au client sans que celui ci n'ai besoin d'en faire la demande à chaque fois. 

Les utilisateurs sont identifiés par des cookies de sessions (pas d'authentification, pas de login). Un utilisateur ayant définit des compteurs dans le passé doit pouvoir les récupérer plus tard dans la mesure ou il se connecte avec le même navigateur. 

## Développement

L'application doit être développée selon les spécifications de Java EE. Tous les calculs de temps sont fait coté serveur. Il est possible d'utiliser une base de données pour stoker les compteurs. Un stockage en mémoire du serveur est néanmoins toléré. 

Le code est "versionné" avec GIT et hébergé sur GitHub (ou autre) et le projet est construit grâce a Maven.


## Tests

Des tests Unitaires vérifient le fonctionnement normal de chaque composant. Des testes d'intégration évaluent le comportement de l'application entière. Ces tests sont automatisés et doivent pouvoir s'exécuter sur Jenkins.


## Mise en production

On utilisera un PaaS (Heroku) et autres ressources gratuites pour la mise en production de l'application. 

##Travail en Equipe 

Chaque équipe devra s'organizer pour que les différents composants de l'application soient développés en parallèle. Il est nécéssaire de faire des sous-équipes.

Chaque équipe travaille dans son propre dépôt git.  Les sous-équipes sont libres de créer autant de branches que nécessaire.


## GitHub ou autre

Tout le monde doit avoir un compte proprement configuré pour que les commits soient signés. Les commits non signés ne seront crédités a personne. 

Chaque équipe désigne un référent (ce n'est pas un chef) qui se charge de créer le dépôt, de donner les droits aux membres de l'équipe et me donner accès au dépôt.

## Evaluation

### Note individuelle

Puisque tous les commits sont signés, la note sera basée sur les contributions de chacun dans le dépôt grâce à l'étude des logs. La note individuelle est sur 20 et représente le travail individuel de chacun.


### Bonification de groupe

Le groupe qui aura fourni le meilleur travail collectif va gagner. Les membres du groupe gagnant verront leur note augmentée de 5 points.  Le choix de la meilleur équipe est basé sur les fonctionnalités développées dans le projet, sur la qualité de l'organisation de l'équipe (comment le travail a été partagé, comment les conflits/problèmes ont été gérés),  de la qualité du code et des tests.

## Deadline

 ***Lundi 8 décembre 2014, 12h30***
